{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UA6B/B,SAASI,EAAcC,EAAUP,GAC/B,IAAMQ,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,SAAUA,EAAUP,MAAOA,IAErCa,EAAO,CAAEN,SAAUA,EAAUP,MAAOA,MAErCA,MApCPD,EAAKM,KAAKU,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBASJ,SAA6BC,GAE3B,I,IAF6Bd,EAAFc,EAAEd,OAAQD,EAAVe,EAAUf,KACjCgB,EADuBD,EAAgBlB,MAElCoB,EAAQ,EAAGA,GAAShB,EAAQgB,GAAS,EAC5Cd,EAAcc,EAAOD,GAClBE,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUP,EAAKsB,EAALtB,MACjBH,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANzB,EAAM,UAE9D0B,OAAM,SAAAJ,G,IAAGf,EAAQe,EAARf,SAAUP,EAAKsB,EAALtB,MAClBH,EAAA0B,OAAOI,QAAQ,sBAAqCF,OAAflB,EAAS,QAAYkB,OAANzB,EAAM,UAE9DmB,GAAmBhB,EAbrByB,CALa,CACXxB,OAAQyB,SAAS9B,EAAKK,OAAO0B,OAC7B3B,KAAM0B,SAAS9B,EAAKI,KAAK2B,OACzB9B,MAAO6B,SAAS9B,EAAKC,MAAM8B,Y","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const data = {\n    amount: parseInt(refs.amount.value),\n    step: parseInt(refs.step.value),\n    delay: parseInt(refs.delay.value),\n  };\n  callPromiseCreation(data);\n}\n\nfunction callPromiseCreation({ amount, step, delay }) {\n  let calculatedDelay = delay;\n  for (let index = 1; index <= amount; index += 1) {\n    createPromise(index, calculatedDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    calculatedDelay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","param1","calculatedDelay","index","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$callPromiseCreation","parseInt","value"],"version":3,"file":"03-promises.40cecd9a.js.map"}